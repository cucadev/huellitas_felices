// server.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json());

// ConexiÃ³n a MongoDB
mongoose.connect("mongodb://localhost:27017/calendario", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Esquema de eventos
const eventSchema = new mongoose.Schema({
  title: String,
  start: Date,
  end: Date,
});

const Event = mongoose.model("Event", eventSchema);

// Obtener todos los eventos
app.get("/api/events", async (req, res) => {
  const events = await Event.find();
  res.json(events);
});

// Crear evento
app.post("/api/events", async (req, res) => {
  const newEvent = new Event(req.body);
  await newEvent.save();
  res.json(newEvent);
});

// Iniciar servidor
app.listen(5000, () => console.log("Servidor corriendo en http://localhost:5000"));


frontend

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
</head>
<body>
  <div id="calendar"></div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      let calendarEl = document.getElementById("calendar");

      let calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "dayGridMonth",
        events: "http://localhost:5000/api/events", // API backend
      });

      calendar.render();
    });
  </script>
</body>
</html>
